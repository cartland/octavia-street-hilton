{
  "rules": {
    "room_names": {
      // any logged in user can get a list of room names
      ".read": "auth !== null",
      "$room_id": {
        // this is just for documenting the structure of rooms, since
        // they are read-only and no write rule allows this to be set
        ".validate": "newData.isString()"
      }
    },
    "members": {
       // I can join or leave any room (otherwise it would be a boring demo)
       // I can have a different name in each room just for fun
       "$room_id": {
          // any member can read the list of member names
          ".read": "data.child(auth.uid).exists()",
          // room must already exist to add a member
          ".validate": "root.child('room_names/'+$room_id).exists()",
          "$user_id": {
             ".write": false,
             ".validate": "newData.isString() && newData.val().length > 0 && newData.val().length < 20"
          }
       }
    },
    "transactions": {
      "$room_id": {
        ".indexOn": ["date"],
        // the list of messages for a room can be read by any member
        ".read": "root.child('members/'+$room_id+'/'+auth.uid).exists()",
        // room we want to write a message to must be valid
        ".validate": "root.child('room_names/'+$room_id).exists()",
        "$message_id": {
          // a new message can be created if it does not exist, but it
          // cannot be modified or deleted
          // any member of a room can write a new message
          ".write": "root.child('members/'+$room_id+'/'+auth.uid).exists() && newData.exists()",
          // the room attribute must be a valid key in room_names/ (the room must exist)
          // the object to write must have a name, message, and timestamp
          //".validate": "newData.hasChildren(['user', 'message', 'timestamp'])",
          // the message must be written by logged in user
          "user": {
             ".validate": "newData.val() === auth.uid"
          },
          // messages cannot be added in the past or the future
          // clients should use Firebase.ServerValue.TIMESTAMP to ensure
          // accurate timestamps
          "timestamp": { ".validate": "newData.val() <= now" },
          // no other fields can be included in a message
          
          "date": { ".validate": "newData.isString()" },
          
          "amount": { ".validate": "newData.isString()" },
          
          "description": { ".validate": "newData.isString()" },
          
          "purchaser": { ".validate": "newData.isString()" },
          
          "cartland": { ".validate": "newData.isString()" },
          
          "npstanford": { ".validate": "newData.isString()" },
          
          "rcrabb": { ".validate": "newData.isString()" },
          
          "stromme": { ".validate": "newData.isString()" },
          
          "notes": { ".validate": "newData.isString()" },
          
          "debts": { ".validate": true },

          "$other": { ".validate": true }
        }
      }
    }
  }
}
